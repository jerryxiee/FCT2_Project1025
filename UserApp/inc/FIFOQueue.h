#ifndef __FIFOQUEUE_H_
#define __FIFOQUEUE_H_
/* Includes ------------------------------------------------------------------*/ 
#include "Include.h"
#ifndef ElemType
#define ElemType u8
#endif
#define UART1_FIFO_SIZE	50
#define UART2_FIFO_SIZE	200
#define UART3_FIFO_SIZE	50
#define UART4_FIFO_SIZE	600
#define UART5_FIFO_SIZE	50
#define UART6_FIFO_SIZE	50
#define CAN1_FIFO_SIZE		100
#define CAN2_FIFO_SIZE		100

typedef enum {QUEUE_IS_EMPTY = 0, QUEUE_NOT_EMPTY = !QUEUE_IS_EMPTY}QueueStatus;
extern __IO u8 g_UartFlagGroup;						//串口标志组
#define FLAG_GRP_UART1					((uint8_t)0x01)
#define FLAG_GRP_UART2					((uint8_t)0x02)
#define FLAG_GRP_UART3					((uint8_t)0x04)
#define FLAG_GRP_UART4					((uint8_t)0x08)
#define FLAG_GRP_UART5					((uint8_t)0x10)
#define FLAG_GRP_UART6					((uint8_t)0x20)

typedef struct FifoQueue 
 {   
     u32 front;   
     u32 rear; 
	 u32 size;
     ElemType *dat;   
 }FIFOQueue;


/*******************************************************************************
**  函数名称  : void QueueInit(FIFOQueue *Queue)
**  函数功能  : 初始化队列
**  输    入  : Queue 指向队列
**  输    出  :  无
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
void QueueInit(FIFOQueue *Queue);


/*******************************************************************************
**  函数名称  : bool QueueIn(FIFOQueue *Queue,ElemType eDat)
**  函数功能  : 将元素放入队列
**  输    入  : Queue 指向队列
**				eDat:元素
**  输    出  :TRUE:成功 FALSE:失败
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
bool QueueIn(FIFOQueue *Queue,ElemType eDat);

/*******************************************************************************
**  函数名称  : bool QueueInStr(FIFOQueue *Queue,ElemType *pStr,u16 nLen)
**  函数功能  : 将元素串放入队列
**  输    入  : Queue 指向队列
**				 pStr:指向元素串
**				 nLen:元素串长度
**  输    出  :TRUE:成功 FALSE:失败
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
bool QueueInStr(FIFOQueue *Queue,ElemType *pStr,u16 nLen);

/*******************************************************************************
**  函数名称  : bool QueueOut(FIFOQueue *Queue,ElemType *ch)
**  函数功能  : 从队列中取出元素
**  输    入  : Queue 指向队列
**				ch:指向要取出的元素
**  输    出  :	false:失败 true:成功 
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
bool QueueOut(FIFOQueue *Queue,ElemType *ch);

/*******************************************************************************
**  函数名称  : QueueStatus isQueueEmpty(const FIFOQueue *Queue)
**  函数功能  : 判断队列是否为空
**  输    入  : Queue 指向队列
**  输    出  : QUEUE_IS_EMPTY:队列为空
**				QUEUE_NOT_EMPTY:队列非空
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
QueueStatus isQueueEmpty(const FIFOQueue *Queue);

/*******************************************************************************
**  函数名称  : u32 QueueLength(const FIFOQueue *Queue)
**  函数功能  : 获取队列长度
**  输    入  : Queue 指向队列
**  输    出  : 队列长度
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
u32 QueueLength(const FIFOQueue *Queue);

/*******************************************************************************
**  函数名称  : ElemType *QueueFindChar(const FIFOQueue *Queue,const u8 ch)
**  函数功能  : 在队列中找到指定字符并返回第一个指针
**  输    入  : Queue 指向队列
**				ch:查找的字符
**  输    出  : 指向该字符的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
ElemType *QueueFindChar(const FIFOQueue *Queue,const u8 ch);

/*******************************************************************************
**  函数名称  : ElemType *QueueFindStr(const FIFOQueue *Queue,const char *subStr)
**  函数功能  : 查询队列中字串的地址
**  输    入  : Queue 指向队列
**				subStr:子串
**  输    出  : 指向队列中第一次出现字串的地址
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
ElemType *QueueFindStr(const FIFOQueue *Queue,const char *subStr);


/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Uart1_Rx_Fifo(void)
**  函数功能  : 返回指向串口1读队列的指针
**  输    入  : 无
**  输    出  :  返回指向串口1读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Uart1_Rx_Fifo(void);

/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Uart2_Rx_Fifo(void)
**  函数功能  : 返回指向串口2读队列的指针
**  输    入  : 无
**  输    出  :  返回指向串口2读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Uart2_Rx_Fifo(void);

/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Uart3_Rx_Fifo(void)
**  函数功能  : 返回指向串口3读队列的指针
**  输    入  : 无
**  输    出  :  返回指向串口3读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Uart3_Rx_Fifo(void);

/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Uart4_Rx_Fifo(void)
**  函数功能  : 返回指向串口4读队列的指针
**  输    入  : 无
**  输    出  :  返回指向串口4读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Uart4_Rx_Fifo(void);
/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Uart5_Rx_Fifo(void)
**  函数功能  : 返回指向串口5读队列的指针
**  输    入  : 无
**  输    出  :  返回指向串口5读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Uart5_Rx_Fifo(void);

/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Uart6_Rx_Fifo(void)
**  函数功能  : 返回指向串口6读队列的指针
**  输    入  : 无
**  输    出  :  返回指向串口6读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Uart6_Rx_Fifo(void);

/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Can1_Rx_Fifo(void)
**  函数功能  : 返回指向CAN1读队列的指针
**  输    入  : 无
**  输    出  :  返回指向CAN1读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Can1_Rx_Fifo(void);

/*******************************************************************************
**  函数名称  : FIFOQueue *Get_Can2_Rx_Fifo(void)
**  函数功能  : 返回指向CAN2读队列的指针
**  输    入  : 无
**  输    出  :  返回指向CAN2读队列的指针
**  全局变量  : 无
**  调用函数  : 无
**  中断资源  : 无
**  备    注  :
*******************************************************************************/
FIFOQueue *Get_Can2_Rx_Fifo(void);

/*************************************************************
** 函数名称: void FIFO_Queue_Init(void)
** 功能描述:  所有队列初始化
** 输入参数:  无
** 输出参数:  无
** 创建:  oueh 2013.06.22
** Note:
***************************************************************/
void FIFO_Queue_Init(void);

#endif
